import requests
import gspread
from google.oauth2 import service_account
import json
import os

#script to get all of the rostered players for every week and compute the highest scorer

# Load the configuration from config.json
with open('config.json') as config_file:
    config = json.load(config_file)

# Google Sheets setup
SHEET_NAME = 'Most Points Generated by Rostered Player All-Time'
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = config['service_account_file']

# Authorize the gspread client
credentials = service_account.Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
gc = gspread.authorize(credentials)

# Open the Google Sheet
spreadsheet_id = config['spreadsheet_id']
sheet = gc.open_by_key(spreadsheet_id)

# Check if the worksheet exists, and create it if not
try:
    worksheet = sheet.worksheet(SHEET_NAME)
except gspread.exceptions.WorksheetNotFound:
    worksheet = sheet.add_worksheet(title=SHEET_NAME, rows="1000", cols="6")
    # Write headers to the new sheet
    worksheet.append_row(['Year', 'Week', 'Display Name', 'Player Name', 'Points', 'Player ID'])

# Log file setup
LOG_FILE = 'processed_weeks.log'

# Function to read processed weeks from the log file
def read_processed_weeks():
    if not os.path.exists(LOG_FILE):
        return set()
    
    with open(LOG_FILE, 'r') as file:
        processed_weeks = set(line.strip() for line in file)
    
    return processed_weeks

# Function to append a new processed week to the log file
def append_processed_week(year, week):
    with open(LOG_FILE, 'a') as file:
        file.write(f"{year},{week}\n")

# Function to check if a week has been processed
def is_week_processed(year, week):
    processed_weeks = read_processed_weeks()
    return f"{year},{week}" in processed_weeks

# Function to update a record in the sheet using update_cells for better control
def update_record(row_number, year, week, display_name, player_name, points, player_id):
    # Prepare the cell range for updating
    cell_range = worksheet.range(f'A{row_number}:F{row_number}')
    
    # Update cell values, ensuring that numbers are not treated as text
    cell_range[0].value = int(year)  # Ensure year is stored as an integer
    cell_range[1].value = int(week)  # Ensure week is stored as an integer
    cell_range[2].value = display_name  # Display name as text
    cell_range[3].value = player_name  # Player name as text
    cell_range[4].value = float(points)  # Ensure points are stored as a float (number)
    cell_range[5].value = player_id  # Player ID as text

    # Update the cells in the worksheet
    worksheet.update_cells(cell_range)

# Function to check if a record already exists
def record_exists(existing_records, year, week, player_id):
    return (year, week, player_id) in existing_records

# Function to process data for a given week
def process_week(league_id, year, week):
    # Define the API endpoints for the current week
    matchups_url = f'https://api.sleeper.app/v1/league/{league_id}/matchups/{week}'
    rosters_url = f'https://api.sleeper.app/v1/league/{league_id}/rosters'
    users_url = f'https://api.sleeper.app/v1/league/{league_id}/users'

    # Initialize the response variable
    highest_scorer = None

    try:
        # Make the GET request for matchups
        matchups_response = requests.get(matchups_url)
        matchups_response.raise_for_status()  # Raise an exception for HTTP errors
        matchups = matchups_response.json()  # Parse the JSON response for matchups

        # Make the GET request for rosters
        rosters_response = requests.get(rosters_url)
        rosters_response.raise_for_status()  # Raise an exception for HTTP errors
        rosters = rosters_response.json()  # Parse the JSON response for rosters

        # Make the GET request for users to get display names and user info
        users_response = requests.get(users_url)
        users_response.raise_for_status()  # Raise an exception for HTTP errors
        users = users_response.json()  # Parse the JSON response for users

        # Create a mapping from user_id to user details (display_name, etc.)
        user_mapping = {user['user_id']: {
            'display_name': user.get('display_name', 'Unknown'),
            'username': user.get('username', 'Unknown')
        } for user in users}

        # Create a mapping from roster_id to owner_id (user_id)
        roster_mapping = {roster['roster_id']: roster['owner_id'] for roster in rosters}

        # Fetch the player information from the Sleeper API
        players_response = requests.get('https://api.sleeper.app/v1/players/nfl')
        players_response.raise_for_status()  # Raise an exception for HTTP errors
        players = players_response.json()  # Parse the JSON response for players

        # Create a mapping from player_id to player details (full name)
        player_mapping = {player_id: {
            'first_name': player.get('first_name', 'Unknown'),
            'last_name': player.get('last_name', 'Unknown'),
            'full_name': f"{player.get('first_name', '')} {player.get('last_name', '')}".strip()
        } for player_id, player in players.items()}

        # Variables to keep track of the highest scorer
        highest_points = float('-inf')  # Start with negative infinity so any player can beat it

        # Process the matchups
        for matchup in matchups:
            roster_id = matchup['roster_id']
            points = matchup['points']
            starters = matchup['starters']
            starters_points = matchup.get('starters_points', [])  # Ensure we handle cases where this field might be missing

            # Get the user_id from the roster mapping
            user_id = roster_mapping.get(roster_id, 'Unknown')

            # Get the user details from the user mapping
            user_details = user_mapping.get(user_id, {})
            display_name = user_details.get('display_name', 'Unknown')

            # Create a list of dictionaries containing player IDs and their corresponding points
            starters_with_points = [
                {'player_id': player_id, 'points': starters_points[idx]}
                for idx, player_id in enumerate(starters)
            ]

            # Check if any starter has the highest points
            for starter in starters_with_points:
                if starter['points'] > highest_points:
                    highest_points = starter['points']
                    highest_scorer = {
                        'player_id': starter['player_id'],
                        'points': starter['points'],
                        'user_id': user_id,
                        'display_name': display_name,
                        'player_name': player_mapping.get(starter['player_id'], {}).get('full_name', 'Unknown Player')
                    }
    except requests.exceptions.RequestException as e:
        print(f"An error occurred: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

    # If highest points are 0, return None and stop processing
    if highest_points <= 0:
        return None

    return highest_scorer

# Function to process data for all weeks in a given year and league
def process_year(year, league_id):
    # Keep track of weeks to reprocess (last two weeks)
    weeks_to_process = set(range(1, 20))  # Initialize to process all weeks
    processed_weeks = read_processed_weeks()
    
    # Find the last two weeks with data
    recent_weeks = sorted({week for week in range(1, 20) if (f"{year},{week}" in processed_weeks) and week <= 19}, reverse=True)[:2]
    
    # Add the last two weeks to the set of weeks to process
    weeks_to_process.update(recent_weeks)
    
    for week in range(1, 19):  # Process weeks 1 through 18
        if week in weeks_to_process:
            if not is_week_processed(year, week):
                highest_scorer = process_week(league_id, year, week)
                if highest_scorer:
                    # Append new record
                    worksheet.append_row([
                        int(year),
                        int(week),
                        highest_scorer['display_name'],
                        highest_scorer['player_name'],
                        float(highest_scorer['points']),
                        highest_scorer['player_id']
                    ])
                    append_processed_week(year, week)
                else:
                    print(f"No valid highest scorer for Year {year} - Week {week}. Stopping further processing.")
                    break  # Stop processing further weeks if no valid highest scorer is found
            else:
                print(f"Year {year} - Week {week} has already been processed.")

def main():
    for year in config['league_ids']:
        league_id = config['league_ids'][year]
        if league_id:
            process_year(year, league_id)

if __name__ == "__main__":
    main()
